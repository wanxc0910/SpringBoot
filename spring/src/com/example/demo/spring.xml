<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 配置User对象创建 -->
    <bean id="user" class="com.example.demo.entity.User"/>

    <!-- 1、set方法注入
         3、p名称空间注入(了解) xmlns:p="http://www.springframework.org/schema/p"
    -->
    <bean id="book" class="com.example.demo.entity.Book" p:author="冯涛">
        <!-- 使用property完成属性注入
             name：类属性名称
             value：向属性注入的值
        -->
        <property name="bookName">
            <value><![CDATA[<修心三不>]]></value> <!-- 属性值包含特殊字符 1、转义 2、使用CDATA -->
        </property>
        <!-- <property name="author" value="冯涛"/> -->
        <property name="address">
            <null/> <!-- 空值注入 -->
        </property>
    </bean>

    <!-- 2、有参构造注入 -->
    <bean id="orders" class="com.example.demo.entity.Orders">
        <constructor-arg name="orderName" value="Mobile Phone"/>
        <constructor-arg name="address" value="China"/>
    </bean>

    <!-- 注入外部bean -->
    <bean id="userService" class="com.example.demo.service.impl.UserServiceImpl">
        <!-- 注入userDao对象 ref：创建userDao对象bean标签id值 -->
        <property name="userDao" ref="userDao"/>
    </bean>
    <bean id="userDao" class="com.example.demo.dao.impl.UserDaoImpl"/>

    <!-- 注入内部bean 级联赋值 -->
    <bean id="emp" class="com.example.demo.entity.Emp">
        <property name="empName" value="张三"/>
        <property name="sex" value="男"/>
        <property name="dept">
            <bean id="dept" class="com.example.demo.entity.Dept">
                <property name="deptName" value="技术部"/>
            </bean>
        </property>
    </bean>

    <!-- 使用util标签提取List集合对象注入 -->
    <util:list id="courseList">
        <ref bean="course"></ref>
        <ref bean="course2"></ref>
    </util:list>
    <!-- 集合对象注入 -->
    <bean id="student" class="com.example.demo.entity.Student">
        <property name="stuName" value="张三"/>
        <!-- List集合对象注入 -->
        <property name="courseList" ref="courseList"/>
        <!-- Map集合对象注入 -->
        <property name="map">
            <map>
                <entry key="JAVA" value="JAVA"/>
                <entry key="C++" value="C++"/>
                <entry key="C" value="C"/>
            </map>
        </property>
    </bean>
    <bean id="course" class="com.example.demo.entity.Course">
        <property name="courseName" value="Spring"/>
    </bean>
    <bean id="course2" class="com.example.demo.entity.Course">
        <property name="courseName" value="MyBatis"/>
    </bean>

    <!-- bean标签作用域 scope属性：默认singleton(单实例) prototype(多实例)
        singleton：单实例，在加载Spring配置文件时创建单实例对象；
        prototype：多实例，在加载Spring配置文件时不创建实例对象，在调用getBean方法时创建多实例对象。
    -->
    <bean id="course3" class="com.example.demo.entity.Course" scope="singleton">
        <property name="courseName" value="singleton"/>
    </bean>
    <bean id="course4" class="com.example.demo.entity.Course" scope="prototype">
        <property name="courseName" value="prototype"/>
    </bean>

    <!-- 自动装配 bean标签autowire属性 byType byName-->
</beans>